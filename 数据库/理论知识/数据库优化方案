1.代码优化
有一些性能问题，完全是由于代码写得不合理，通过直接修改一下代码就能解决问题的。比如for循环次数过多，作了很多无所谓的条件判断，相同的逻辑重复多次等。
举个例子：
一个update，先查询出entity，再执行update，这样无疑多了一次数据库交互。还有一个问题，update语句可能会操作一些无需更新的字段。

2.定位慢SQL，并优化
以MySQL为例，最常见的方式是，由自带的慢查询日志或者开源的慢查询系统定位到具体的出问题的SQL，然后使用explain、profile等工具来逐步调优，最后通过测试达到效果后上线。
具体优化手段：
尽量少用sqlserver自带的函数；
连续数值条件，用between不用In
update语句，如果只改1，2个字段，不用update全部字段
尽量使用数字型字段，若只含数值信息的字段尽量不设计为字符型
不建议使用select * from t，用具体字段列表代替 *
表与表之间通过一个冗余字段关联，要比直接用join有更好的性能
select count(*) from t,这样不带任何条件会引起全表扫描

3.合理使用索引
可以应用索引的操作符：>=,between,in,like不以%开头
尽量不要对索引字段进行null值判断；尽量避免使用!=操作符；尽量避免用or来连接条件，如果一个字段有索引，另一个字段没有索引会导致全表扫描；不做列运算

4.分表
分表方式：水平分割（按行）、垂直分割（按列）
分表场景
A.根据经验，MySQL表数据一般达到百万级别，查询效率会很低
B.一张表的某些字段值比较大并且很少使用，可以将这些字段隔离成单独一个表，通过外键关联
水平分表策略
按时间分表：当数据有很强的实效性，例如微博的数据，可以按月分割
按区间分表：例如用户表1-100万用一张表，100-200万用一张表
hash分表：通过一个原始目标id或者是名称，按一定的hash算法计算出数据存储的表名

5.读写分离
当一台服务器不能满足需求时，采用读写分离的方式进行集群
一台数据库支持最大的连接数是有限的（MySQL默认为100，最大可达16384），如果用户的并发访问很多，一台机器无法满足需求，可以集群处理。MySQL集群处理技术最常用的就是读写分离
主从同步：数据库最终会把数据持久化到磁盘，集群必须确保每个数据库服务器的数据是一致的。从库读主库写，从库从主库上同步数据
读写分离：使用负载均衡实现，写操作都往主库上写，读操作往从服务器上读

6.缓存
使用场景：短时间内相同数据重复查询多次且数据更新不频繁。这个时候选择先从缓存查询
缓存作用：减轻数据库的压力，减少访问时间
缓存选择：如果数据量小，并且不会频繁增长又清空，那么选择本地缓存。具体的话，如果需要一些策略支持，可以考虑缓存服务

7.NoSQL
使用场景：如果业务数据不需和其他数据做关联，不需要事务或外键之类的支持，而且有可能写入异常频繁，这个时候比较适合用NoSQL。

8.异步、多线程
针对某些客户端的请求，在服务端可能需要针对这些请求做一些附属的事情，这些事情其实用户并不关心或者用户不需要立即拿到这些事情的处理结果，这种情况比较适合用异步方式处理。
异步作用
—— 缩短接口的响应时间，使用户的请求快速返回，用户体验好
—— 避免线程长时间处于运行状态，这样会引起服务线程池的可用线程长时间不够用，进而引起线程池服务队列长度增大，从而堵塞更多请求任务，使得更多请求得不到技术处理
—— 线程池长时间处于运行状态，可能会引起系统load、cpu使用率，机器性能下降等问题，甚至引发雪崩。异步思路可以在不增加机器数和CPU数情况下，有效解决这个问题。
异步实现
—— 额外开辟线程，这里可以采用额外开辟一个线程或使用线程池的做法，在IO线程之外的线程来处理相应的任务，在IO线程中让response先返回
—— 使用消息队列（MQ）中间件服务
